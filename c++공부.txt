<c++시작하기>

hello world출력 코드
#include <iostream>
int main(){
	std::cout << "Hello, world!" << std::endl;
	return 0;
}

c++에서 한 행 주석은  //를 사용하면 된다
ex) // 간단한 C++프로그램

c++에서 입출력을 포함한 많은 기본 기능은 기본 영역이 아닌 표준 라이브러리에 속해있다 
기본 영역에 속한 기능은 모든 C++프로그램에서 늘 사용할 수 있다 하지만 표준 라이브러리는 반드시 명시적으로
요쳥해야 사용할 수 있다
표준 라이브러리 기능을 요청할 떄는 #include 지시문을 사용한다 이러한 지시문은 일반적으로 프로그램 시작 부분에 등장한다
ex) #include <iostream>
iostream은 순차적 또는 연속적인 입출력을 지원한다 #include 지시문에서 iostream이 꺽쇠괄호(<, >)로 묶여 있을 떄는 표준 헤더라는
C++라이브러리 일부분을 참조한다 
C++ 표준에서는 각 헤더의 명칭과 동작을 정의하는데 그런데 표준 헤더가 무엇인지 정확하게 알려주지는 않는다
프로그램에 표준 헤더를 포함하면 관련 라이브러리 기능을 사용할 수 있다는 것만 알고 있으면 된다 

함수는 프로그램 일부분에 이름을 붙인 것으로서 프로그램의 다른 영역에서 호출하거나 실행할 수 있다 모든 C++프로그램은 반드시
main함수를 포함하며 C++구현체는 main함수를 호출해서 프로그램을 실행한다 

main함수는 프로그램이 성공적으로 실행되었는지 알릴려고 정수값을 반환한다 0이외의 값은 문제가 있음을 의미한다 
main함수 호출은  int main()이렇게 하고 여기서 int는 정수를 나타내려는 용도로 정의된 이름이다 main뒤의 괄호 안에는
함수가 실행되면서 받는 매개변수가 들어간다 매개변수가 없으면 괄호가 비어있다 

C++에서는 프로그램 실행 시 중괄호 사이의 내용을 하나의 단위로 취급한다 왼쪽 중괄호는 실행문의 시작을 표시하고 오른쪽 중괄호는
실행문의 끝을 표시한다 즉 중괄호는 그 사이에 있는 모든 실행문이 하나의 함수에 속해 있음을 나타낸다 
ex)int main(){// 왼쪽 중괄호   // 실행문 } // 오른쪽 중괄호 

표준 라이브러리를 사용한 출력
ex) std::cout << "hellow world!" << std::endl;
이 실행문은 표준 라이브러리의 출력 연산자인 <<를 사용하여 hello world를 출력하고 이어서 std::endl의 값을 출력한다
이름이 std::로 시작하는 코드는 해당 이름이 std라는 네임스페이스에 속해 있음을 나타낸다 
네임스페이스는 관련 있는 기능을 하나의 이름 아래 모아놓은 것이다 std는 표준 라이브러리가 정의한 모든 기능이 속한 네임스페이스다
예를들어 iostream 표준 헤더는 cout과 endl을 정의하며 이를 참조하려면 std::cout와 std::endl로 표기해야 한다 

std::cout은 표준 출력 스트림을 참조하는 이름이다 C++구현체에서 프로그램의 일반적인 출력 기능이 필요할 때 사용한다
GUI 기반 운영체제에서 이 실행문을 사용하면 프로그램과 연관된 창에 실행문에서 정한 내용을 출력한다 

표준 출력 스트림에 std::end을 넣으면 현재 행에서 더 어떤 내용을 출력하지 않는다 따라서 프로그램에서 추가로 생성하는
출력 내용은 새로운 행에 나타난다


반환문은 해당 함수의 실행을 끝내고 함수를 호출한 프로그램에 return과 세미콜론 사이의 값을 반환한다
반환 값은 함수가 반환할 것이라고 명시한 타입과 일치해야 한다 main함수의 경우 반환 타입이 int이고 반환 대상은
main함수를 호출한 C++구현체이다 즉 main함수의 반환문은 구현체로 전달할 정수값 표현식을 반드시 표현해야 한다 
프로그램 종료 지점이 여러 군데일 수도 있는데 이러한 프로그램은 여러 개의 반환문이 있을 수 있다 
함수 정의에서 해당 함수가 특정 타입의 값을 반환할 것이라 명시했다면 함수의 모든 반환문은 반드시 적합한 타입의 값을 반환해야 합니다


표현식은 프로그램에서 무언가를 계산하도록 요청한다 표현식을 실행했을 때는 부수적으로 발생하는 결과가 프로그램이나 구현체의 상태에
간접적으로 영향을 줄 수 있다 예를들어 3+4는 7을 반환하여 부수적으로 발생하는 결과가 텂지만
 std::cout << "hellow world!" << std::endl;과 같은 코드는 부수적으로 발생하는 결과로 표준 출력 스트림에 hello world를 넣는다
표현식은 연산자와 피연산자를 포함하며 형태가 다양하다  << 는 기호 연산자이고 std::cout, "hello world" std::endl는 피연산자이다
모든 피연산자는 타입이 있는데 데이터 구조와 해당 데이터 구조에 적합한 연산이 무엇인지 나타내는 것이다
연산자의 역할은 피연산자의 타입에 따라 달라진다 
타입에는 이름이 있는데 예를들어 프로그래밍 언어의 기본 영역은 정수를 표현하는 타입의 이름을 int라고 정의한다
그리고 라이브러리는 스트림 기반 출력을 제공하는 타입의 이름을 std::ostream이라고 정의한다 
std::cout는 std::ostream타입이다



</c++시작하기>
